
apiVersion: apps/v1
kind: Deployment
metadata:
  name: porthole
  namespace: porthole
  labels:
    app.kubernetes.io/name: porthole
    app.kubernetes.io/component: kubernetes-service-proxy
    app.kubernetes.io/instance: porthole
    app.kubernetes.io/version: "0.2.91"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: porthole
      app.kubernetes.io/component: kubernetes-service-proxy
      app.kubernetes.io/instance: porthole
  template:
    metadata:
      labels:
        app.kubernetes.io/name: porthole
        app.kubernetes.io/component: kubernetes-service-proxy
        app.kubernetes.io/instance: porthole
        app.kubernetes.io/version: "0.2.91"
    spec:
      serviceAccountName: porthole
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
      containers:
      - name: porthole
        image: docker.io/jgoodier/porthole:0.2.91
        imagePullPolicy: IfNotPresent
        env:
        - name: REFRESH_INTERVAL
          value: "60"
        - name: OUTPUT_DIR
          value: "/app/generated-output"
        - name: LOG_LEVEL
          value: debug
        ports:
        - containerPort: 7070
          name: http
        # Liveness probe - check if Python processes are running
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pgrep -f 'python.*porthole' > /dev/null"
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        # Readiness probe - check if nginx is responding on port 7070
        readinessProbe:
          httpGet:
            path: /
            port: 7070
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: app-generated-output
          mountPath: /app/generated-output
        # - name: shared-config
        #   mountPath: /app/web-root
        # - name: porthole-config
        #   mountPath: /app/src/porthole/config
        - name: logs
          mountPath: /tmp
      volumes:
      - name: app-generated-output
        emptyDir: {}
      - name: shared-config
        emptyDir: {}
      - name: porthole-config
        configMap:
          name: porthole-config
      - name: logs
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 5
