# NGINX location blocks for Kubernetes services
# Generated at: 2025-07-21 11:28:10.980578
# Total locations: 10
# Add these inside your server block

location /default_kubernetes_443 {
            set $base_path "/default_kubernetes_443";
            rewrite ^/default_kubernetes_443/?(.*)$ /$1 break;
            proxy_pass http://kubernetes.default.svc.cluster.local:443;

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 $upstream_http_location;
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

location /kubecost_kubecost-aggregator_9004 {
            set $base_path "/kubecost_kubecost-aggregator_9004";
            rewrite ^/kubecost_kubecost-aggregator_9004/?(.*)$ /$1 break;
            proxy_pass http://kubecost-aggregator.kubecost.svc.cluster.local:9004;

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 $upstream_http_location;
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

location /kubecost_kubecost-cloud-cost_9005 {
            set $base_path "/kubecost_kubecost-cloud-cost_9005";
            rewrite ^/kubecost_kubecost-cloud-cost_9005/?(.*)$ /$1 break;
            proxy_pass http://kubecost-cloud-cost.kubecost.svc.cluster.local:9005;

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 $upstream_http_location;
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

location /kubecost_kubecost-cost-analyzer_9003 {
            set $base_path "/kubecost_kubecost-cost-analyzer_9003";
            rewrite ^/kubecost_kubecost-cost-analyzer_9003/?(.*)$ /$1 break;
            proxy_pass http://kubecost-cost-analyzer.kubecost.svc.cluster.local:9003;

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 $upstream_http_location;
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

location /kubecost_kubecost-cost-analyzer_9090 {
            set $base_path "/kubecost_kubecost-cost-analyzer_9090";
            rewrite ^/kubecost_kubecost-cost-analyzer_9090/?(.*)$ /$1 break;
            proxy_pass http://kubecost-cost-analyzer.kubecost.svc.cluster.local:9090;

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 $upstream_http_location;
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

location /kubecost_kubecost-forecasting_5000 {
            set $base_path "/kubecost_kubecost-forecasting_5000";
            rewrite ^/kubecost_kubecost-forecasting_5000/?(.*)$ /$1 break;
            proxy_pass http://kubecost-forecasting.kubecost.svc.cluster.local:5000;

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 $upstream_http_location;
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

location /kubecost_kubecost-grafana_80 {
            set $base_path "/kubecost_kubecost-grafana_80";
            rewrite ^/kubecost_kubecost-grafana_80/?(.*)$ /$1 break;
            proxy_pass http://kubecost-grafana.kubecost.svc.cluster.local:80;

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 $upstream_http_location;
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

location /kubecost_kubecost-prometheus-server_80 {
            set $base_path "/kubecost_kubecost-prometheus-server_80";
            rewrite ^/kubecost_kubecost-prometheus-server_80/?(.*)$ /$1 break;
            proxy_pass http://kubecost-prometheus-server.kubecost.svc.cluster.local:80;

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 $upstream_http_location;
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

location /porthole_porthole_7070 {
            set $base_path "/porthole_porthole_7070";
            rewrite ^/porthole_porthole_7070/?(.*)$ /$1 break;
            proxy_pass http://porthole.porthole.svc.cluster.local:7070;

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 $upstream_http_location;
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

location /porthole_porthole-frontend_7070 {
            set $base_path "/porthole_porthole-frontend_7070";
            rewrite ^/porthole_porthole-frontend_7070/?(.*)$ /$1 break;
            proxy_pass http://porthole-frontend.porthole.svc.cluster.local:7070;

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 $upstream_http_location;
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

