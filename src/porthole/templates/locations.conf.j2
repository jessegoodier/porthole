# NGINX location blocks for Kubernetes services
# Generated at: {{ generated_at }}
# Total locations: {{ locations|length }}
# Add these inside your server block

{% for location in locations -%}
        location {{ location.path }} {
            set $base_path "{{ location.path }}";
            rewrite ^{{ location.path }}/?(.*)$ /$1 break;
            proxy_pass http://{{ location.service_dns }};

            # Porthole FAB injection configuration
            # Force decompression to enable sub_filter processing
            proxy_set_header Accept-Encoding "";
            
            # Enable response buffering for sub_filter
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            
            # Enable error interception for FAB on error pages
            proxy_intercept_errors on;
            error_page 404 502 503 504 =200 /porthole-error-fab;
            
            # Sub-filter configuration for FAB injection
            sub_filter_types text/plain application/json text/css application/javascript text/xml application/xml;
            sub_filter_once off;
            sub_filter_last_modified off;
            
            # Multiple injection strategies for maximum reliability
            # Strategy 1: Inject before closing body tag (most common)
            sub_filter '</body>' '<script>fetch("/porthole-fab.html").then(r=>r.text()).then(h=>document.body.insertAdjacentHTML("beforeend",h));</script></body>';
            
            # Strategy 2: Inject before closing html tag (backup)
            sub_filter '</html>' '<script>if(!document.getElementById("porthole-fab-container")){fetch("/porthole-fab.html").then(r=>r.text()).then(h=>document.documentElement.insertAdjacentHTML("beforeend",h));}</script></html>';
            
            # Strategy 3: Inject at end of any HTML content (fallback)
            sub_filter '</head>' '</head><!-- Porthole FAB container ready -->';

            # Handle redirects by returning the location header as plain text
            proxy_hide_header Location;
            add_header X-Original-Location $upstream_http_location;
            add_header X-Original-Status $upstream_status;
            
            # If it's a 302, return the location as the response body with FAB
            # TODO: This is a hack to handle redirects. We should find a better way to handle this.
            if ($upstream_status = 302) {
                return 200 '$upstream_http_location<script>fetch("/porthole-fab.html").then(r=>r.text()).then(h=>document.body.insertAdjacentHTML("beforeend",h));</script>';
            }

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

{% endfor %}

# Error page location for FAB injection on upstream failures
location = /porthole-error-fab {
    internal;
    try_files /porthole-error.html =500;
    add_header Content-Type text/html;
    
    # Inject FAB into error page too
    sub_filter '</body>' '<script>fetch("/porthole-fab.html").then(r=>r.text()).then(h=>document.body.insertAdjacentHTML("beforeend",h));</script></body>';
    sub_filter_once off;
}